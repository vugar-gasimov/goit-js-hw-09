{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAGMC,EAASC,SAASC,cAAc,SAChCC,EAAQF,SAASC,cAAc,uBAC/BE,EAAOH,SAASC,cAAc,sBAC9BG,EAASJ,SAASC,cAAc,wBACvBD,SAASC,cAAc,yBAGtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAE3B,IAAMC,EAAgBC,KAAKC,SAAW,GAGtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEH,WAAUS,MAAAR,IAGpBG,EAAO,CAAEJ,WAAUS,MAAAR,G,GAEpBA,E,IAKPR,EAAOiB,iBAAiB,UAGxB,SAAiBC,GAEfA,EAAMC,iBAQN,IALA,IAAMC,EAAcC,SAAShB,EAAOiB,MAAO,IACrCC,EAAoBF,SAASlB,EAAMmB,MAAO,IAC1CE,EAAYH,SAASjB,EAAKkB,MAAO,IAG9BG,EAAI,EAAGA,EAAIL,EAAaK,GAAK,EAEpCnB,EAAcmB,EAAI,EAAGF,EAAqBE,EAAID,GAC3CE,MAAK,SAACC,GAELC,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAA+CC,OAAtBJ,EAAOpB,SAAS,QAAmBwB,OAAbJ,EAAOX,MAAM,M,IAErFgB,OAAM,SAACL,GAENC,EAAA9B,GAAS+B,OAAOI,QAAQ,sBAA4CF,OAAtBJ,EAAOpB,SAAS,QAAmBwB,OAAbJ,EAAOX,MAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["// Import the Notiflix library for displaying notifications\nimport Notiflix from 'notiflix';\n\n// Select form elements from the HTML\nconst formEl = document.querySelector('.form');\nconst delay = document.querySelector('input[name=\"delay\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst submit = document.querySelector('button[type=\"submit\"]');\n\n// Function to create a promise with a random resolve/reject outcome after a delay\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    // Generate a random boolean to determine if the promise should resolve or reject\n    const shouldResolve = Math.random() > 0.3;\n    \n    // Use setTimeout to simulate an asynchronous task\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Resolve the promise with an object containing position and delay\n        resolve({ position, delay });\n      } else {\n        // Reject the promise with the same object\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Add a submit event listener to the form\nformEl.addEventListener('submit', onclick);\n\n// Function to handle form submission\nfunction onclick(event) {\n  // Prevent the default form submission behavior\n  event.preventDefault();\n\n  // Extract values from form inputs and parse them as integers\n  const amountValue = parseInt(amount.value, 10);\n  const initialDelayValue = parseInt(delay.value, 10);\n  const stepValue = parseInt(step.value, 10);\n\n  // Loop to create and handle a specified number of promises\n  for (let i = 0; i < amountValue; i += 1) {\n    // Create a promise with an incremented position and calculated delay\n    createPromise(i + 1, initialDelayValue + (i * stepValue))\n      .then((result) => {\n        // Display a success notification with position and delay when the promise resolves\n        Notiflix.Notify.success(`✅ Fulfilled promise ${result.position} in ${result.delay}ms`);\n      })\n      .catch((result) => {\n        // Display a failure notification with position and delay when the promise is rejected\n        Notiflix.Notify.failure(`❌ Rejected promise ${result.position} in ${result.delay}ms`);\n      });\n  }\n}"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay1","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","addEventListener","event","preventDefault","amountValue","parseInt","value","initialDelayValue","stepValue","i","then","result","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.b0d563d8.js.map"}